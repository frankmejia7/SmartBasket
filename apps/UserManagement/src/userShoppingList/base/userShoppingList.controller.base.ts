/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { UserShoppingListService } from "../userShoppingList.service";
import { UserShoppingListCreateInput } from "./UserShoppingListCreateInput";
import { UserShoppingList } from "./UserShoppingList";
import { UserShoppingListFindManyArgs } from "./UserShoppingListFindManyArgs";
import { UserShoppingListWhereUniqueInput } from "./UserShoppingListWhereUniqueInput";
import { UserShoppingListUpdateInput } from "./UserShoppingListUpdateInput";

export class UserShoppingListControllerBase {
  constructor(protected readonly service: UserShoppingListService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: UserShoppingList })
  async createUserShoppingList(
    @common.Body() data: UserShoppingListCreateInput
  ): Promise<UserShoppingList> {
    return await this.service.createUserShoppingList({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [UserShoppingList] })
  @ApiNestedQuery(UserShoppingListFindManyArgs)
  async userShoppingLists(
    @common.Req() request: Request
  ): Promise<UserShoppingList[]> {
    const args = plainToClass(UserShoppingListFindManyArgs, request.query);
    return this.service.userShoppingLists({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: UserShoppingList })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async userShoppingList(
    @common.Param() params: UserShoppingListWhereUniqueInput
  ): Promise<UserShoppingList | null> {
    const result = await this.service.userShoppingList({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: UserShoppingList })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateUserShoppingList(
    @common.Param() params: UserShoppingListWhereUniqueInput,
    @common.Body() data: UserShoppingListUpdateInput
  ): Promise<UserShoppingList | null> {
    try {
      return await this.service.updateUserShoppingList({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: UserShoppingList })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteUserShoppingList(
    @common.Param() params: UserShoppingListWhereUniqueInput
  ): Promise<UserShoppingList | null> {
    try {
      return await this.service.deleteUserShoppingList({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
